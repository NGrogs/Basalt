{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\src\\\\components\\\\Dapp\\\\FileUpload.js\";\nimport React, { Component } from 'react';\nimport firebase from '../Firebase/firebase';\nimport storehash from '../IPFS/storehash';\nimport ipfs from '../IPFS/IPFS';\nimport getWeb3 from \"../utils/getWeb3\";\nimport { withRouter } from 'react-router-dom';\nimport { resolve } from 'multiaddr';\n\nvar uniqueRandom = require('unique-random');\n\nvar FileUpload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload(props) {\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FileUpload).call(this, props));\n\n    _this.handleChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.id, e.target.value));\n    };\n\n    _this.getFile = function (e) {\n      e.preventDefault();\n      var file = e.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.pushToIPFS =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                    resolve(ipfsHash[0].hash);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.addToBlockchain =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(_ipfsLink) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var rand = uniqueRandom(1, 10000000);\n                  var key = rand();\n                  var newDate = new Date();\n                  newDate = newDate.getTime();\n                  var _account = _this.state.account[0];\n                  var _uid = _this.state.uid;\n                  storehash.methods.sendDocument(_ipfsLink, newDate, key, _uid).send({\n                    from: _account\n                  });\n                  resolve(key);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.AddMyStuff =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(e) {\n        var rand, key, ipfsHash, _key;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                e.preventDefault();\n                rand = uniqueRandom(1, 10000000);\n                key = rand();\n\n                _this.setState({\n                  idForBlockchain: key\n                });\n\n                console.log(key);\n                _context4.next = 7;\n                return _this.pushToIPFS();\n\n              case 7:\n                ipfsHash = _context4.sent;\n                _context4.next = 10;\n                return _this.addToBlockchain(ipfsHash);\n\n              case 10:\n                _key = _context4.sent;\n                _context4.next = 13;\n                return _this.createStudent();\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.createStudent =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(e) {\n        var _uid, _studentName, _studentNumber, _courseCode, _courseName, _idForBlockchain, db;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                //get student details from state variables & current user uid\n                _uid = _this.state.uid;\n                _studentName = _this.state.StudentName;\n                _studentNumber = _this.state.StudentNumber;\n                _courseCode = _this.state.CourseCode;\n                _courseName = _this.state.CourseName;\n                _idForBlockchain = _this.state.idForBlockchain; // database.ref.students.uid.studentNumber \n\n                db = firebase.database();\n                db.ref().child(\"students\").child(_uid).child(_studentNumber).set({\n                  studentName: _studentName,\n                  courseCode: _courseCode,\n                  courseName: _courseName,\n                  blockchainKey: _idForBlockchain\n                });\n                alert(\"Student added\");\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var web3, ethAddress;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              //check user is logged in\n              firebase.auth().onAuthStateChanged(function (user) {\n                if (user) {\n                  // User is signed in.\n                  this.setState({\n                    user: firebase.auth().currentUser\n                  }); //not needed?\n\n                  this.setState({\n                    uid: firebase.auth().currentUser.uid\n                  });\n                } else {\n                  // No user is signed in.\n                  //redirect to login\n                  this.props.history.push('/login');\n                }\n              }.bind(_assertThisInitialized(_assertThisInitialized(_this)))); //initialize web3\n\n              _context6.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context6.sent;\n              _context6.next = 6;\n              return storehash.options.address;\n\n            case 6:\n              ethAddress = _context6.sent;\n\n              _this.setState({\n                ethAddress: ethAddress\n              }); //set account for Blockchain network\n\n\n              _context6.t0 = _this;\n              _context6.next = 11;\n              return web3.eth.getAccounts();\n\n            case 11:\n              _context6.t1 = _context6.sent;\n              _context6.t2 = {\n                account: _context6.t1\n              };\n\n              _context6.t0.setState.call(_context6.t0, _context6.t2);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        align: \"center\",\n        className: \"container\",\n        onLoad: _this.componentDidMount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, \" File Upload \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        style: {\n          fontStyle: \"italic\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"( Please make sure you give this page access to your MetaMask! )\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group \",\n        style: {\n          width: \"40%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Choose a file to upload\"), React.createElement(\"input\", {\n        value: _this.state.name,\n        onChange: _this.getFile,\n        className: \"btn btn-lg text-white\",\n        style: {\n          backgroundColor: \"#B65DF3\"\n        },\n        id: \"file\",\n        type: \"file\",\n        name: \"file\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group \",\n        style: {\n          width: \"40%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Student Name\"), React.createElement(\"input\", {\n        value: _this.state.StudentName,\n        onChange: _this.handleChange,\n        className: \"form-control\",\n        id: \"StudentName\",\n        type: \"text\",\n        name: \"StudentName\",\n        placeholder: \"Student Name\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group \",\n        style: {\n          width: \"40%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Student Number\"), React.createElement(\"input\", {\n        value: _this.state.StudentNumber || '',\n        onChange: _this.handleChange,\n        className: \"form-control\",\n        id: \"StudentNumber\",\n        type: \"text\",\n        name: \"StudentNumber\",\n        placeholder: \"Student Number\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group \",\n        style: {\n          width: \"40%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Course Code\"), React.createElement(\"input\", {\n        value: _this.state.CourseCode || '',\n        onChange: _this.handleChange,\n        className: \"form-control\",\n        id: \"CourseCode\",\n        type: \"text\",\n        name: \"CourseCode\",\n        placeholder: \"Course Code\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group \",\n        style: {\n          width: \"40%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"Course Name\"), React.createElement(\"input\", {\n        value: _this.state.CourseName || '',\n        onChange: _this.handleChange,\n        className: \"form-control\",\n        id: \"CourseName\",\n        type: \"text\",\n        name: \"CourseName\",\n        placeholder: \"Course Name\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: \"btn btn-lg text-white\",\n        style: {\n          backgroundColor: \"#B65DF3\"\n        },\n        type: \"submit\",\n        onClick: _this.AddMyStuff,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \" Add Document! \")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \" What information is stored along with your file? \"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Your file is actually stored using Interplanitary File System \", React.createElement(\"a\", {\n        href: \"https://ipfs.io/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \" (IPFS) \"), \" and the unique URL is stored on the Ethereum network. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), \"We also store your MetaMask wallet public address and the date of the upload. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), \"We'll store a record of who this file was uploaded for along with the link to the document on a central database\"));\n    };\n\n    _this.state = {\n      account: _this.props.acc,\n      ethAddress: _this.props.ethAdd,\n      user: '',\n      uid: '',\n      // variables for the smart contract and ethereum attributes\n      web3Provider: null,\n      contracts: null,\n      // variables of student gotten from form\n      StudentName: '',\n      StudentNumber: '',\n      CourseCode: '',\n      CourseName: '',\n      idForBlockchain: '',\n      // variables returned from and needed for smart contract & IPFS\n      IPFSlink: null,\n      buffer: ''\n    };\n    return _this;\n  }\n  /* updates fields when changed */\n\n\n  return FileUpload;\n}(Component);\n\nexport default withRouter(FileUpload);","map":{"version":3,"sources":["C:\\Users\\elite\\Desktop\\Blockchain Project\\Basalt\\src\\components\\Dapp\\FileUpload.js"],"names":["React","Component","firebase","storehash","ipfs","getWeb3","withRouter","resolve","uniqueRandom","require","FileUpload","props","handleChange","e","setState","target","id","value","getFile","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","buffer","pushToIPFS","Promise","reject","add","state","err","ipfsHash","hash","addToBlockchain","_ipfsLink","rand","key","newDate","Date","getTime","_account","account","_uid","uid","methods","sendDocument","send","AddMyStuff","idForBlockchain","console","log","_key","createStudent","_studentName","StudentName","_studentNumber","StudentNumber","_courseCode","CourseCode","_courseName","CourseName","_idForBlockchain","db","database","ref","child","set","studentName","courseCode","courseName","blockchainKey","alert","componentDidMount","auth","onAuthStateChanged","user","currentUser","history","push","bind","web3","options","address","ethAddress","eth","getAccounts","render","fontStyle","width","name","backgroundColor","acc","ethAdd","web3Provider","contracts","IPFSlink"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport firebase from '../Firebase/firebase';\r\nimport storehash from '../IPFS/storehash';\r\nimport ipfs from '../IPFS/IPFS';\r\nimport getWeb3 from \"../utils/getWeb3\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport { resolve } from 'multiaddr';\r\nconst uniqueRandom = require('unique-random');\r\n\r\nclass FileUpload extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account : this.props.acc,\r\n            ethAddress: this.props.ethAdd,\r\n\r\n            user: '',\r\n            uid: '',\r\n\r\n            // variables for the smart contract and ethereum attributes\r\n            web3Provider: null,\r\n            contracts: null,\r\n            \r\n            // variables of student gotten from form\r\n            StudentName: '',\r\n            StudentNumber: '',\r\n            CourseCode: '',\r\n            CourseName: '',\r\n            idForBlockchain: '',\r\n\r\n            // variables returned from and needed for smart contract & IPFS\r\n            IPFSlink: null,\r\n            buffer: '',\r\n        };\r\n    }\r\n\r\n     /* updates fields when changed */\r\n    handleChange= (e) => {\r\n        this.setState({ \r\n            [e.target.id]: e.target.value \r\n        })\r\n    }\r\n\r\n    /* retrieves the file the user uploaded*/\r\n    getFile = (e) => {\r\n        e.preventDefault()\r\n        const file = e.target.files[0]\r\n        let reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => this.convertToBuffer(reader)\r\n    }\r\n\r\n    /* converts file to be suitable to send to IPFS */\r\n    convertToBuffer = async(reader) => {\r\n        //file is converted to a buffer for upload to IPFS\r\n        const buffer = await Buffer.from(reader.result)\r\n        this.setState({buffer})\r\n        \r\n    }\r\n\r\n    /* send the file to IPFS */\r\n    pushToIPFS = async(e) => {\r\n        return new Promise((resolve, reject) => {\r\n            ipfs.add(this.state.buffer, (err, ipfsHash) => {\r\n                resolve(ipfsHash[0].hash);\r\n            })\r\n        });\r\n    }\r\n\r\n    /* store IPFS link on blockchain */\r\n    addToBlockchain = async(_ipfsLink) => {\r\n        \r\n\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const rand = uniqueRandom(1, 10000000)\r\n            var key = rand()\r\n\r\n            let newDate = new Date()\r\n            newDate = newDate.getTime()\r\n            var _account = this.state.account[0]\r\n            var _uid = this.state.uid\r\n\r\n            storehash.methods.sendDocument(_ipfsLink, newDate, key, _uid).send({from: _account}) \r\n\r\n            resolve(key)\r\n        })\r\n/*\r\n        //create a new key for our student\r\n        var key = this.state.idForBlockchain\r\n        \r\n        //get todays date\r\n        let newDate = new Date()\r\n        newDate = newDate.getTime()\r\n\r\n        // get the users metamask account\r\n        var _account = this.state.account[0]\r\n\r\n        //get current users ID\r\n        var _uid = this.state.uid\r\n\r\n       // const test = async () => {\r\n        storehash.methods.sendDocument(_ipfsLink, newDate, key, _uid).send({from: _account})\r\n        //};\r\n\r\n        //test();\r\n        //call the smart contract method to create a new document\r\n        //storehash.methods.sendDocument(this.state.IPFSlink, newDate).send({from: this.state.account})\r\n    */\r\n    }\r\n\r\n    AddMyStuff = async (e) => {\r\n        e.preventDefault()\r\n        const rand = uniqueRandom(1, 10000000)\r\n        var key = rand()\r\n        this.setState({idForBlockchain: key})\r\n        console.log(key)\r\n\r\n\r\n        const ipfsHash = await this.pushToIPFS()\r\n        //await this.createStudent()\r\n        const _key = await this.addToBlockchain(ipfsHash)\r\n        await this.createStudent()\r\n    }\r\n\r\n    // add a student record to the database\r\n    createStudent = async(e) => {\r\n        //get student details from state variables & current user uid\r\n        var _uid = this.state.uid\r\n        var _studentName = this.state.StudentName\r\n        var _studentNumber = this.state.StudentNumber\r\n        var _courseCode = this.state.CourseCode\r\n        var _courseName = this.state.CourseName\r\n        var _idForBlockchain = this.state.idForBlockchain\r\n\r\n        // database.ref.students.uid.studentNumber \r\n        const db = firebase.database()\r\n        db.ref().child(\"students\").child(_uid).child(_studentNumber).set(\r\n            {   studentName: _studentName,\r\n                courseCode: _courseCode,\r\n                courseName: _courseName,\r\n                blockchainKey: _idForBlockchain \r\n            }\r\n        );\r\n        \r\n        alert(\"Student added\")\r\n        \r\n    }\r\n\r\n    componentDidMount = async () => {\r\n    //check user is logged in\r\n    firebase.auth().onAuthStateChanged(function(user) {\r\n        if (user) {\r\n            // User is signed in.\r\n            this.setState({user: firebase.auth().currentUser}) //not needed?\r\n            this.setState({uid: firebase.auth().currentUser.uid })\r\n        } else {\r\n            // No user is signed in.\r\n            //redirect to login\r\n            this.props.history.push('/login')\r\n        }\r\n        }.bind(this))\r\n\r\n    //initialize web3\r\n    const web3 = await getWeb3();\r\n\r\n    // get contract address\r\n    const ethAddress = await storehash.options.address\r\n    this.setState({ethAddress})\r\n\r\n    //set account for Blockchain network\r\n    this.setState({account: await web3.eth.getAccounts()})\r\n    }\r\n\r\n\r\n    render = () => { \r\n        return (\r\n            <div align=\"center\"className=\"container\" onLoad={this.componentDidMount}>\r\n                <h1> File Upload </h1><br/>\r\n                <h5 style={{fontStyle: \"italic\"}}>( Please make sure you give this page access to your MetaMask! )</h5><br/>\r\n\r\n            \r\n                <form>\r\n                    <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                        <label>Choose a file to upload</label>\r\n                        <input value={this.state.name} onChange={this.getFile} className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} id=\"file\" type=\"file\" name=\"file\" required/>\r\n                    </div>\r\n                    <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                        <label>Student Name</label>\r\n                        <input value={this.state.StudentName} onChange={this.handleChange} className=\"form-control\" id=\"StudentName\" type=\"text\" name=\"StudentName\" placeholder=\"Student Name\" required/>\r\n                    </div>\r\n                    <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                        <label>Student Number</label>\r\n                        <input value={this.state.StudentNumber || ''} onChange={this.handleChange} className=\"form-control\" id=\"StudentNumber\" type=\"text\" name=\"StudentNumber\" placeholder=\"Student Number\" required/>\r\n                    </div>\r\n                    <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                        <label>Course Code</label>\r\n                        <input value={this.state.CourseCode || ''} onChange={this.handleChange} className=\"form-control\" id=\"CourseCode\" type=\"text\" name=\"CourseCode\" placeholder=\"Course Code\" required/>\r\n                    </div>\r\n                    <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                        <label>Course Name</label>\r\n                        <input value={this.state.CourseName || ''} onChange={this.handleChange} className=\"form-control\" id=\"CourseName\" type=\"text\" name=\"CourseName\" placeholder=\"Course Name\" required/>\r\n                    </div>\r\n                        \r\n                    <button className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} type=\"submit\" onClick={this.AddMyStuff}> Add Document! </button>\r\n                </form>\r\n                \r\n                \r\n                <br/><br/><br/><br/>\r\n                \r\n                <h1> What information is stored along with your file? </h1> <br/>\r\n                <h5>\r\n                    Your file is actually stored using Interplanitary File System <a href=\"https://ipfs.io/\"> (IPFS) </a> and \r\n                    the unique URL is stored on the Ethereum network. <br/>\r\n\r\n                    We also store your MetaMask wallet public address and the date of the upload. <br /><br />\r\n\r\n                    We'll store a record of who this file was uploaded for along with the link to the document on \r\n                    a central database \r\n                </h5>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(FileUpload);"]},"metadata":{},"sourceType":"module"}