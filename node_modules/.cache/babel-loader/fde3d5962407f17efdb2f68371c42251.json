{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\elite\\\\Desktop\\\\Blockchain Project\\\\Basalt\\\\src\\\\components\\\\Dapp\\\\FileUpload.js\";\nimport React, { Component } from 'react';\nimport firebase from '../Firebase/firebase';\nimport storehash from '../IPFS/storehash';\nimport ipfs from '../IPFS/IPFS';\nimport getWeb3 from \"../utils/getWeb3\";\nimport { withRouter } from 'react-router-dom';\n\nvar FileUpload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUpload)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // variables for current firebase user\n      user: '',\n      uid: '',\n      // variables for the smart contract and ethereum attributes\n      web3Provider: null,\n      contracts: null,\n      account: '0x0',\n      // variables of student gotten from form\n      StudentName: '',\n      StudentNumber: '',\n      CourseCode: '',\n      CourseName: '',\n      // variables returned from and needed for smart contract & IPFS\n      IPFSlink: null,\n      buffer: '',\n      ethAddress: '',\n      idForBlockchain: '',\n      successMessage: '',\n      loading: false,\n      ipfsDone: false,\n      blockchainDone: false\n      /* updates fields when changed */\n\n    };\n\n    _this.handleChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.id, e.target.value));\n    };\n\n    _this.getFile = function (e) {\n      e.preventDefault();\n      var file = e.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.pushToIPFS =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _context2.next = 3;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash);\n\n                  _this.setState({\n                    IPFSlink: ipfsHash[0].hash\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.addToBlockchain =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(e) {\n        var newDate, _ipfsLink, _account, event;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault(); //get todays date\n\n                newDate = new Date();\n                newDate = newDate.getTime();\n                _ipfsLink = _this.state.IPFSlink;\n                _account = _this.state.account; // var event = storehash.documentAdded()\n\n                event = storehash.events.documentAdded();\n                _context3.next = 8;\n                return storehash.methods.sendDocument(_ipfsLink, newDate).send({\n                  from: _account.toString()\n                });\n\n              case 8:\n                event.watch(function (error, result) {\n                  if (!error) //this.setState({idForBlockchain: result.args.id})\n                    console.log(result);\n                }); //call the smart contract method to create a new document\n                //storehash.methods.sendDocument(this.state.IPFSlink, newDate).send({from: this.state.account})\n                //   this.setState({idForBlockchain: documentId})\n\n                _this.setState({\n                  blockchainDone: true\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.createStudent =\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(e) {\n        var _uid, _studentName, _studentNumber, _courseCode, _courseName, _idForBlockchain, db;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                //get student details from state variables & current user uid\n                _uid = _this.state.uid;\n                _studentName = _this.state.StudentName;\n                _studentNumber = _this.state.StudentNumber;\n                _courseCode = _this.state.CourseCode;\n                _courseName = _this.state.CourseName;\n                _idForBlockchain = _this.state.idForBlockchain; // database.ref.students.uid.studentNumber \n\n                db = firebase.database();\n                db.ref().child(\"students\").child(_uid).child(_studentNumber).set({\n                  studentName: _studentName,\n                  courseCode: _courseCode,\n                  courseName: _courseName,\n                  blockchainKey: _idForBlockchain\n                });\n\n                _this.setState({\n                  successMessage: 'Student added'\n                });\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.setLoading =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var web3, ethAddress;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context5.next = 3;\n              return _this.componentDidMount();\n\n            case 3:\n              _context5.next = 5;\n              return getWeb3();\n\n            case 5:\n              web3 = _context5.sent;\n              _context5.next = 8;\n              return storehash.options.address;\n\n            case 8:\n              ethAddress = _context5.sent;\n\n              _this.setState({\n                ethAddress: ethAddress\n              }); //set account for Blockchain network\n\n\n              _context5.t0 = _this;\n              _context5.next = 13;\n              return web3.eth.getAccounts();\n\n            case 13:\n              _context5.t1 = _context5.sent;\n              _context5.t2 = {\n                account: _context5.t1\n              };\n\n              _context5.t0.setState.call(_context5.t0, _context5.t2);\n\n            case 16:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.fullProcess =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return FileUpload.pushToIPFS();\n\n            case 2:\n              _context6.next = 4;\n              return FileUpload.addToBlockchain();\n\n            case 4:\n              _context6.next = 6;\n              return FileUpload.createStudent();\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    _this.render = function () {\n      if (_this.state.ipfsDone) {\n        return React.createElement(\"div\", {\n          align: \"center\",\n          className: \"container\",\n          style: {\n            marginTop: '5%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"form-group \",\n          style: {\n            width: \"40%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, \"Student Name\"), React.createElement(\"input\", {\n          value: _this.state.StudentName,\n          onChange: _this.handleChange,\n          className: \"form-control\",\n          id: \"StudentName\",\n          type: \"text\",\n          name: \"StudentName\",\n          placeholder: \"Student Name\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group \",\n          style: {\n            width: \"40%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, \"Student Number\"), React.createElement(\"input\", {\n          value: _this.state.StudentNumber || '',\n          onChange: _this.handleChange,\n          className: \"form-control\",\n          id: \"StudentNumber\",\n          type: \"text\",\n          name: \"StudentNumber\",\n          placeholder: \"Student Number\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group \",\n          style: {\n            width: \"40%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, \"Course Code\"), React.createElement(\"input\", {\n          value: _this.state.CourseCode || '',\n          onChange: _this.handleChange,\n          className: \"form-control\",\n          id: \"CourseCode\",\n          type: \"text\",\n          name: \"CourseCode\",\n          placeholder: \"Course Code\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"form-group \",\n          style: {\n            width: \"40%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \"Course Name\"), React.createElement(\"input\", {\n          value: _this.state.CourseName || '',\n          onChange: _this.handleChange,\n          className: \"form-control\",\n          id: \"CourseName\",\n          type: \"text\",\n          name: \"CourseName\",\n          placeholder: \"Course Name\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          className: \"btn btn-lg text-white\",\n          style: {\n            backgroundColor: \"#B65DF3\"\n          },\n          type: \"submit\",\n          onClick: _this.setState({\n            blockchainDone: true\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, \" Add Document! \")));\n      } else if (_this.state.loading) {\n        return React.createElement(\"div\", {\n          align: \"center\",\n          className: \"container\",\n          style: {\n            marginTop: '5%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"form-group \",\n          style: {\n            width: \"40%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, \"Choose a file to upload\"), React.createElement(\"input\", {\n          value: _this.state.name,\n          onChange: _this.getFile,\n          className: \"btn btn-lg text-white\",\n          style: {\n            backgroundColor: \"#B65DF3\"\n          },\n          id: \"file\",\n          type: \"file\",\n          name: \"file\",\n          required: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        })), React.createElement(\"button\", {\n          className: \"btn btn-lg text-white\",\n          style: {\n            backgroundColor: \"#B65DF3\"\n          },\n          type: \"submit\",\n          onClick: _this.setState({\n            ipfsDone: true\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, \" Push Document to IPFS \")));\n      } else if (!_this.state.loading) {\n        return React.createElement(\"div\", {\n          align: \"center\",\n          className: \"container\",\n          style: {\n            marginTop: '5%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          style: {\n            fontStyle: \"italic\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, \"( Please make sure you give this page access to your MetaMask! )\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }, \" What information is stored along with your file? \"), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211\n          },\n          __self: this\n        }), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, \"Your file is actually stored using Interplanitary File System \", React.createElement(\"a\", {\n          href: \"https://ipfs.io/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, \" (IPFS) \"), \" and the unique URL is stored on the Ethereum network. \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }), \"We also store your MetaMask wallet public address and the date of the upload. \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }), \"We'll store a record of who this file was uploaded for along with the link to the document on a central database\")), React.createElement(\"div\", {\n          className: \"col\",\n          style: {\n            marginTop: '10%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, \"To get started click here! \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          className: \"btn btn-lg text-white\",\n          style: {\n            backgroundColor: \"#B65DF3\"\n          },\n          type: \"submit\",\n          onClick: _this.setLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, \" Start! \")))));\n      } else {\n        return React.createElement(\"div\", {\n          align: \"center\",\n          className: \"container\",\n          onLoad: _this.componentDidMount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, \" File Upload \"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }), React.createElement(\"h5\", {\n          style: {\n            fontStyle: \"italic\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, \"( Please make sure you give this page access to your MetaMask! )\"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }), React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }, _this.state.successMessage), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, \"Ethereum Contract address: \", _this.state.ethAddress), \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"col-sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, \"Your metamask account: \", _this.state.account[0]), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }))));\n      }\n    };\n\n    return _this;\n  }\n\n  return FileUpload;\n}(Component);\n\nexport default withRouter(FileUpload);","map":{"version":3,"sources":["C:\\Users\\elite\\Desktop\\Blockchain Project\\Basalt\\src\\components\\Dapp\\FileUpload.js"],"names":["React","Component","firebase","storehash","ipfs","getWeb3","withRouter","FileUpload","state","user","uid","web3Provider","contracts","account","StudentName","StudentNumber","CourseCode","CourseName","IPFSlink","buffer","ethAddress","idForBlockchain","successMessage","loading","ipfsDone","blockchainDone","handleChange","e","setState","target","id","value","getFile","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","pushToIPFS","add","err","ipfsHash","console","log","hash","addToBlockchain","newDate","Date","getTime","_ipfsLink","_account","event","events","documentAdded","methods","sendDocument","send","toString","watch","error","createStudent","_uid","_studentName","_studentNumber","_courseCode","_courseName","_idForBlockchain","db","database","ref","child","set","studentName","courseCode","courseName","blockchainKey","setLoading","componentDidMount","web3","options","address","eth","getAccounts","fullProcess","render","marginTop","width","backgroundColor","name","fontStyle"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport firebase from '../Firebase/firebase';\r\nimport storehash from '../IPFS/storehash';\r\nimport ipfs from '../IPFS/IPFS';\r\nimport getWeb3 from \"../utils/getWeb3\";\r\nimport { withRouter } from 'react-router-dom';\r\nclass FileUpload extends Component {\r\n    state = {\r\n        // variables for current firebase user\r\n        user: '',\r\n        uid: '',\r\n\r\n        // variables for the smart contract and ethereum attributes\r\n        web3Provider: null,\r\n        contracts: null,\r\n        account: '0x0',\r\n\r\n        // variables of student gotten from form\r\n        StudentName: '',\r\n        StudentNumber: '',\r\n        CourseCode: '',\r\n        CourseName: '',\r\n\r\n        // variables returned from and needed for smart contract & IPFS\r\n        IPFSlink: null,\r\n        buffer: '',\r\n        ethAddress: '',\r\n        idForBlockchain: '',\r\n\r\n        successMessage: '',\r\n        loading: false,\r\n        ipfsDone: false,\r\n        blockchainDone: false,\r\n    }\r\n\r\n     /* updates fields when changed */\r\n    handleChange= (e) => {\r\n        this.setState({ \r\n            [e.target.id]: e.target.value \r\n        })\r\n    }\r\n\r\n    /* retrieves the file the user uploaded*/\r\n    getFile = (e) => {\r\n        e.preventDefault()\r\n        const file = e.target.files[0]\r\n        let reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => this.convertToBuffer(reader)\r\n    }\r\n\r\n    /* converts file to be suitable to send to IPFS */\r\n    convertToBuffer = async(reader) => {\r\n        //file is converted to a buffer for upload to IPFS\r\n        const buffer = await Buffer.from(reader.result)\r\n        this.setState({buffer})\r\n    }\r\n\r\n    /* send the file to IPFS */\r\n    pushToIPFS = async(e) => {\r\n        e.preventDefault()\r\n        await ipfs.add(this.state.buffer, (err, ipfsHash) => {\r\n            console.log(err, ipfsHash)\r\n            this.setState({IPFSlink : ipfsHash[0].hash})\r\n        })\r\n    }\r\n\r\n    /* store IPFS link on blockchain */\r\n    addToBlockchain = async(e) => {\r\n        e.preventDefault()\r\n        //get todays date\r\n        let newDate = new Date()\r\n        newDate = newDate.getTime()\r\n        var _ipfsLink = this.state.IPFSlink\r\n        var _account = this.state.account\r\n\r\n       // var event = storehash.documentAdded()\r\n        var event = storehash.events.documentAdded()\r\n        await storehash.methods.sendDocument(_ipfsLink, newDate).send({from: _account.toString()})\r\n        event.watch(function(error, result) {\r\n                if (!error)\r\n                    //this.setState({idForBlockchain: result.args.id})\r\n                    console.log(result);\r\n            }\r\n        );\r\n\r\n\r\n        //call the smart contract method to create a new document\r\n        //storehash.methods.sendDocument(this.state.IPFSlink, newDate).send({from: this.state.account})\r\n     //   this.setState({idForBlockchain: documentId})\r\n        \r\n        this.setState({blockchainDone: true})\r\n    }\r\n\r\n    // add a student record to the database\r\n    createStudent = async(e) => {\r\n        //get student details from state variables & current user uid\r\n        var _uid = this.state.uid\r\n        var _studentName = this.state.StudentName\r\n        var _studentNumber = this.state.StudentNumber\r\n        var _courseCode = this.state.CourseCode\r\n        var _courseName = this.state.CourseName\r\n        var _idForBlockchain = this.state.idForBlockchain\r\n\r\n        // database.ref.students.uid.studentNumber \r\n        const db = firebase.database()\r\n        db.ref().child(\"students\").child(_uid).child(_studentNumber).set(\r\n            {   studentName: _studentName,\r\n                courseCode: _courseCode,\r\n                courseName: _courseName,\r\n                blockchainKey: _idForBlockchain \r\n            }\r\n        );\r\n        \r\n        this.setState({successMessage: 'Student added'})\r\n        \r\n    }\r\n\r\n  /*  componentDidMount = async () => {\r\n    //check user is logged in\r\n    firebase.auth().onAuthStateChanged(function(user) {\r\n        if (user) {\r\n            // User is signed in.\r\n            this.setState({user: firebase.auth().currentUser}) //not needed?\r\n            this.setState({uid: firebase.auth().currentUser.uid })\r\n        } else {\r\n            // No user is signed in.\r\n            //redirect to login\r\n            this.props.history.push('/login')\r\n        }\r\n        }.bind(this))\r\n\r\n    //initialize web3\r\n    const web3 = await getWeb3();\r\n\r\n    // get contract address\r\n    const ethAddress = await storehash.options.address\r\n    this.setState({ethAddress})\r\n\r\n    //set account for Blockchain network\r\n    this.setState({account: await web3.eth.getAccounts()})\r\n    }*/\r\n\r\n    setLoading = async() => {\r\n        this.setState({loading : true})\r\n        await this.componentDidMount()\r\n        const web3 = await getWeb3();\r\n\r\n        // get contract address\r\n        const ethAddress = await storehash.options.address\r\n        this.setState({ethAddress})\r\n\r\n        //set account for Blockchain network\r\n        this.setState({account: await web3.eth.getAccounts()})\r\n    }\r\n\r\n    fullProcess = async () => {\r\n        await FileUpload.pushToIPFS()\r\n        await FileUpload.addToBlockchain()\r\n        await FileUpload.createStudent()\r\n      }\r\n    \r\n\r\n    render = () => { \r\n        if(this.state.ipfsDone){\r\n            return(\r\n            <div align=\"center\"className=\"container\" style={{marginTop: '5%'}}>\r\n            <form>\r\n                <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                    <label>Student Name</label>\r\n                    <input value={this.state.StudentName} onChange={this.handleChange} className=\"form-control\" id=\"StudentName\" type=\"text\" name=\"StudentName\" placeholder=\"Student Name\" required/>\r\n                </div>\r\n                <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                    <label>Student Number</label>\r\n                    <input value={this.state.StudentNumber || ''} onChange={this.handleChange} className=\"form-control\" id=\"StudentNumber\" type=\"text\" name=\"StudentNumber\" placeholder=\"Student Number\" required/>\r\n                </div>\r\n                <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                    <label>Course Code</label>\r\n                    <input value={this.state.CourseCode || ''} onChange={this.handleChange} className=\"form-control\" id=\"CourseCode\" type=\"text\" name=\"CourseCode\" placeholder=\"Course Code\" required/>\r\n                </div>\r\n                <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                    <label>Course Name</label>\r\n                    <input value={this.state.CourseName || ''} onChange={this.handleChange} className=\"form-control\" id=\"CourseName\" type=\"text\" name=\"CourseName\" placeholder=\"Course Name\" required/>\r\n                </div>\r\n                    \r\n                <button className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} type=\"submit\" onClick={this.setState({blockchainDone: true})}> Add Document! </button>\r\n            </form>\r\n            </div>\r\n            )\r\n        }\r\n        else if(this.state.loading){\r\n            return(\r\n            <div align=\"center\"className=\"container\" style={{marginTop: '5%'}}>\r\n            <form>\r\n                <div className=\"form-group \" style={{width: \"40%\"}}>\r\n                    <label>Choose a file to upload</label>\r\n                    <input value={this.state.name} onChange={this.getFile} className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} id=\"file\" type=\"file\" name=\"file\" required/>\r\n                </div>\r\n                <button className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} type=\"submit\" onClick={this.setState({ipfsDone: true})}> Push Document to IPFS </button>\r\n            </form>\r\n            </div>\r\n            )\r\n        }\r\n        else if(!this.state.loading){\r\n            return(\r\n                <div align=\"center\"className=\"container\" style={{marginTop: '5%'}}>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <h5 style={{fontStyle: \"italic\"}}>( Please make sure you give this page access to your MetaMask! )</h5><br/>                \r\n                            <h1> What information is stored along with your file? </h1> <br/>\r\n                            <h5>\r\n                                Your file is actually stored using Interplanitary File System <a href=\"https://ipfs.io/\"> (IPFS) </a> and \r\n                                the unique URL is stored on the Ethereum network. <br/>\r\n\r\n                                We also store your MetaMask wallet public address and the date of the upload. <br /><br />\r\n\r\n                                We'll store a record of who this file was uploaded for along with the link to the document on \r\n                                a central database \r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"col\" style={{marginTop: '10%'}}>\r\n                        <h2>To get started click here! <br/><button className=\"btn btn-lg text-white\" style={{backgroundColor: \"#B65DF3\"}} type=\"submit\" onClick={this.setLoading}> Start! </button></h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n        return (\r\n            <div align=\"center\"className=\"container\" onLoad={this.componentDidMount}>\r\n                <h1> File Upload </h1><br/>\r\n                <h5 style={{fontStyle: \"italic\"}}>( Please make sure you give this page access to your MetaMask! )</h5><br/>\r\n\r\n                <h3>{this.state.successMessage}</h3>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\"> \r\n                        <h5>Ethereum Contract address: {this.state.ethAddress}</h5> <br/><br/>\r\n                    </div>\r\n                    <div className=\"col-sm\"> \r\n                        <h5>Your metamask account: {this.state.account[0]}</h5><br/><br/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )}\r\n    }\r\n}\r\n\r\nexport default withRouter(FileUpload);"]},"metadata":{},"sourceType":"module"}